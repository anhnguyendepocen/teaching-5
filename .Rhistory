ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~lambda)
n <- 1000
lambda <- c(3, 7 , 11)
# Regular poisson distribution =============================
x <- vapply(
lambda,
FUN = function(l){rpois(n = n, lambda = l)},
numeric(n)
)
colnames(x) <- paste0('l', ifelse(lambda <= 10, paste0('0', lambda), lambda))
x <- as.data.frame(x)
pdta <- within(pdta, lambda <- factor(lambda))
ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~lambda)
names(x)
# preamble =================================================
library('ggplot2'); library('tidyr')
# Poisson regression models count data
# count data = realization of a discrete random variable, e.g. n \in N
# log of y is modeled as a linear function of x and beta
# often also log-linear model (contingency table analysis)
# E(Y | x) = e^{\alpha + x\beta'}
# population parameters ====================================
n <- 1000
lambda <- c(3, 7 , 11)
# Regular poisson distribution =============================
x <- vapply(
lambda,
FUN = function(l){rpois(n = n, lambda = l)},
numeric(n)
)
colnames(x) <- paste0('l', ifelse(lambda <= 10, paste0('0', lambda), lambda))
x <- as.data.frame(x)
pdta <- within(pdta, lambda <- factor(lambda))
# preamble =================================================
library('ggplot2'); library('tidyr')
# Poisson regression models count data
# count data = realization of a discrete random variable, e.g. n \in N
# log of y is modeled as a linear function of x and beta
# often also log-linear model (contingency table analysis)
# E(Y | x) = e^{\alpha + x\beta'}
# population parameters ====================================
n <- 1000
lambda <- c(3, 7 , 11)
# Regular poisson distribution =============================
x <- vapply(
lambda,
FUN = function(l){rpois(n = n, lambda = l)},
numeric(n)
)
colnames(x) <- paste0('l', ifelse(lambda <= 10, paste0('0', lambda), lambda))
x <- as.data.frame(x)
# plot distributions ---------------------------------------
ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~lambda)
# preamble =================================================
library('ggplot2'); library('tidyr')
# Poisson regression models count data
# count data = realization of a discrete random variable, e.g. n \in N
# log of y is modeled as a linear function of x and beta
# often also log-linear model (contingency table analysis)
# E(Y | x) = e^{\alpha + x\beta'}
# population parameters ====================================
n <- 1000
lambda <- c(3, 7 , 11)
# Regular poisson distribution =============================
x <- vapply(
lambda,
FUN = function(l){rpois(n = n, lambda = l)},
numeric(n)
)
colnames(x) <- paste0('l', lambda)
x <- as.data.frame(x)
# plot distributions ---------------------------------------
ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~lambda)
n <- 1000
lambda <- c(1, 5 , 9)
# Regular poisson distribution =============================
x <- vapply(
lambda,
FUN = function(l){rpois(n = n, lambda = l)},
numeric(n)
)
colnames(x) <- paste0('l', lambda)
x <- as.data.frame(x)
# plot distributions ---------------------------------------
ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~lambda)
# preamble =================================================
library('ggplot2'); library('tidyr')
# Poisson regression models count data
# count data = realization of a discrete random variable, e.g. n \in N
# log of y is modeled as a linear function of x and beta
# often also log-linear model (contingency table analysis)
# E(Y | x) = e^{\alpha + x\beta'}
# population parameters ====================================
n <- 1000
lambda <- c(1, 5 , 9)
# Regular poisson distribution =============================
x <- vapply(
lambda,
FUN = function(l){rpois(n = n, lambda = l)},
numeric(n)
)
colnames(x) <- paste0('l', lambda)
x <- as.data.frame(x)
# plot distributions ---------------------------------------
pdta <- gather(x, 'lambda', 'value', 1:3)
ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~lambda)
apply(x, 2, function(y){cbind(mean = mean(y), var = var(y))})
size <- lambda; lambda <- 9
x <- vapply(
size,
FUN = function(s){rnbinom(n = n, mu = lambda, size = s)},
numeric(n)
)
colnames(x) <- paste0('d', size)
x <- as.data.frame(x)
pdta <- gather(x, 'disp', 'value', 1:3)
ggplot(data = pdta, aes(x = value)) +
geom_bar() +
facet_grid(~disp)
apply(x, 2, function(y){cbind(mean = mean(y), var = var(y))})
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
log(-9)
log(-4)
plot(1:n, log(1:n))
plot(log(seq(0, 10, length.out = 1000))
)
plot(log(seq(0, 10, length.out = 1000), type = 'l')
)
plot(log(seq(0, 10, length.out = 1000)), type = 'l')
plot(lambda, log(lambda), type = 'l')
lambda <- seq(0, 10, length.out = 1000)
plot(lambda, log(lambda), type = 'l')
source('~/.active-rstudio-document', echo=TRUE)
str(qog)
pdta <- expand.grid(0:10, 0:10)
pdta <- expand.grid(democ = 0:10, autoc = 0:10)
pdta <- within(pdta, score <- democ - autoc)
library('ggplot2')
pdta <- within(pdta, score <- democ - autoc)
ggplot(data = pdta, aes(x = score)) + geom_bar()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = pdta, aes(x = democ, y = score)) +
geom_point()
source('~/.active-rstudio-document', echo=TRUE)
library('extrafont'); loadfonts(quiet = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x <- rnorm(N)
source('~/.active-rstudio-document', echo=TRUE)
x_std <- minmaxstd(x)
library('ggplot2'); library('dplyr')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(pdta)
source('~/.active-rstudio-document', echo=TRUE)
head(pdta)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cond <- runif(N)
outcome <- rnorm(N) * cond
std <- vapply(cbind(cond, outcome), minmaxstd, numeric(N))
std <- vapply(cbind(cond, outcome), minmaxstd, numeric(1))
cond <- runif(N)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
colnames(std)
source('~/.active-rstudio-document', echo=TRUE)
pdta <- data.frame(index = 1:N, cond, outcome, std)
pdta <- gather(pdta, 'what', 'value', cond:outcome_std)
source('~/.active-rstudio-document', echo=TRUE)
pdta <- data.frame(index = 1:N, cond, outcome, std)
qplot(pdta, x = cond, y = outcome, geom = 'point')
cond <- runif(N)
outcome <- runif(N) * cond
std <- apply(cbind(cond, outcome), 2, minmaxstd)
colnames(std) <- paste0(colnames(std), '_std')
pdta <- data.frame(index = 1:N, cond, outcome, std)
qplot(pdta, x = cond, y = outcome, geom = 'point')
qplot(data = pdta, x = cond, y = outcome, geom = 'point')
pdta <- gather(pdta, 'what', 'value', cond:outcome_std)
ggplot(data = pdta, aes(x = what, y = value)) +
geom_point() +
geom_line(aes(group = index), alpha = .4)
qplot(x = cond, y = outcome, geom = 'point')
qplot(x = cond, y = outcome, geom = 'point') +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .2)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .2))
qplot(x = cond, y = outcome, geom = 'point') +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .2)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .2)) +
geom_abline(intercept = 0, slope = 1)
qplot(x = cond, y = outcome, geom = 'point') +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .2)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .2)) +
geom_abline(intercept = 0, slope = 1, colour = 'white')
std <- apply(cbind(cond, outcome), 2, minmaxstd)  # std data
colnames(std) <- paste0(colnames(std), '_std')
pdta <- data.frame(index = 1:N, cond, outcome, std)
pdta <- rbind.data.frame(
index = 1:N,
type = rep(c('raw', 'std'), each = 100),
cbind(cond, outcome), std
)
std <- apply(cbind(cond, outcome), 2, minmaxstd)  # std data
colnames(std) <- paste0(colnames(std), '_std')
pdta <- rbind.data.frame(
index = 1:N,
type = rep(c('raw', 'std'), each = 100),
cbind(cond, outcome), std
)
std <- apply(cbind(cond, outcome), 2, minmaxstd)  # std data
pdta <- rbind.data.frame(
index = 1:N,
type = rep(c('raw', 'std'), each = 100),
cbind(cond, outcome), std
)
pdta
pdta <- rbind.data.frame(
index = 1:N,
type =
rep(c('raw', 'std'), each = 100)
,
cbind(cond, outcome), std
)
rep(c('raw', 'std'), each = 100)
pdta <- data.frame(
index = 1:N, type = rep(c('raw', 'std'), each = 100), pdta
)
std <- apply(cbind(cond, outcome), 2, minmaxstd)  # std data
pdta <- rbind.data.frame(cbind(cond, outcome), std)
pdta <- data.frame(
index = 1:N, type = rep(c('raw', 'std'), each = 100), pdta
)
pdta
pdta <- gather(pdta, 'what', 'value', cond, outcome)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(std)
summary(pdta)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(std)
summary(outcome)
source('~/.active-rstudio-document', echo=TRUE)
pdta <-
rbind.data.frame(cbind(cond, outcome), std)
rbind.data.frame(cbind(cond, outcome), std)
source('~/.active-rstudio-document', echo=TRUE)
rbind.data.frame(cbind(cond, outcome), std)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(std[1], std[2])
plot(std[, 1], std[, 2])
cond <- runif(N)                                  # raw data
outcome <- runif(N, min = 0, max = 10) * cond
plot(std[, 1], std[, 2])
plot(cond, outcome)
N <- 10                                   # Population size
cond <- runif(N)                                  # raw data
outcome <- runif(N, min = 0, max = 10) * cond
std <- apply(cbind(cond, outcome), 2, minmaxstd)  # std data
summary(outcome)
rbind(cbind(cond, outcome), std)
rbind.data.frame(cbind(cond, outcome), std)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
means <- aggregate(
pdta[, c('cond', 'outcome')],
by = list(type = pdta[['type']]),
FUN = mean
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
means
source('~/.active-rstudio-document', echo=TRUE)
outcome <- runif(N, min = 0, max = 10) * cond
pdta <- data.frame(
index = 1:N, type = rep(c('raw', 'std'), each = N), pdta
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(outcome, cond)
rm(list = ls())
if(Sys.info()['user'] == 'dag'){
path.data <- '/Users/dag/Dropbox/data/dembar/2015/'
path.out <- '/Users/dag/Dropbox/data/dembar/2015/out'
}
required.packages <- c('ggplot2', 'tidyr')
invisible(lapply(required.packages, library, character.only = TRUE))
library(foreign)
dembar <- read.dta(
file.path(
path.data, 'DB_dataset_allcountries_standardizeddata.dta'
)
)
democracy_functions <- c("INDLIB", "RULEOFLAW", "PUBLIC",
"COMPET", "MUTUCONS", "GOVCAP", "TRANSPAR", "PARTICIP",
"REPRES"
)
required.packages <- c('ggplot2', 'tidyr', 'car')
invisible(lapply(required.packages, library, character.only = TRUE))
scatterplotMatrix(blueprint[, democracy_functions])
source('~/.active-rstudio-document', echo=TRUE)
democracy_principle <- c("Freedom", "Control", "Equality")
source('~/.active-rstudio-document', echo=TRUE)
x_std <- minmaxstd(cbind(x, x_constraint))
source('~/.active-rstudio-document', echo=TRUE)
x_std
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
results <- matrix(FALSE, ncol = 2, nrow = N)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(results[, 1], results[, 2])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(results)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
results <- data.frame(results)
library('ggplot2')
qplot(data = results, aes( x = cond, y = outcome)) +
geom_point() +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .25)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .25)) +
geom_abline(intercept = 0, slope = 1, colour = 'white')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Preamble -------------------------------------------------
rm(list = ls())
if(Sys.info()['user'] == 'dag'){
path.data <- '/Users/dag/Dropbox/data/dembar/2015/'
path.out <- '/Users/dag/Dropbox/data/dembar/2015/out'
}
required.packages <- c('ggplot2', 'tidyr', 'car')
invisible(lapply(required.packages, library, character.only = TRUE))
# constants ------------------------------------------------
democracy_principles <- c("Freedom", "Control", "Equality")
democracy_functions <- c(
"INDLIB", "RULEOFLAW", "PUBLIC", "COMPET", "MUTUCONS",
"GOVCAP", "TRANSPAR", "PARTICIP", "REPRES"
)
# data objects ---------------------------------------------
library(foreign)
dembar <- read.dta(
file.path(
path.data, 'DB_dataset_allcountries_standardizeddata.dta'
)
)
detach(package:foreign)
blueprint <- subset(dembar, Blueprint == 1)
scatterplotMatrix(blueprint[, democracy_principles])
scatterplotMatrix(blueprint[, democracy_functions])
source('~/.active-rstudio-document', echo=TRUE)
scatterplotMatrix(results)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = FALSE)
gwf <- read.dta(
"/Users/dag/github/teaching/ws1617/introAtr/01/data/GWF_AllPoliticalRegimes.dta"
)
library("foreign")
gwf <- read.dta(
"/Users/dag/github/teaching/ws1617/introAtr/01/data/GWF_AllPoliticalRegimes.dta"
)
gwf <- within(gwf, {
regime_type <- ifelse(
gwf_regimetype != "NA", 1,
ifelse(gwf_nonautocracy == "democracy", 0, NA)
)
regime_type <- factor(regime_type, 0:1, c('Demokratie', 'Autokratie'))
}
)
library('ggplot2')
ggplot(
data = subset(gwf, !is.na(regime_type)),
aes(x = year)
) +
geom_bar(width = 1, colour = 'gray85', size = .1) + facet_wrap(~ regime_type) +
scale_x_continuous(breaks = seq(1950, 2010, 10)) +
labs(
y = "Anzahl unabhängiger Staaten",
title = "Geddes, Wright, Frantz (2014)"
) +
theme_minimal() +
theme(axis.title.x = element_blank())
ggsave(
plot = p, file = './regimesDistribution.png',
width = 7, height = 7/1.618, dpi = 300
)
p <- ggplot(
data = subset(gwf, !is.na(regime_type)),
aes(x = year)
) +
geom_bar(width = 1, colour = 'gray85', size = .1) + facet_wrap(~ regime_type) +
scale_x_continuous(breaks = seq(1950, 2010, 10)) +
labs(
y = "Anzahl unabhängiger Staaten",
title = "Geddes, Wright, Frantz (2014)"
) +
theme_minimal() +
theme(axis.title.x = element_blank())
ggsave(
plot = p, file = './regimesDistribution.png',
width = 7, height = 7/1.618, dpi = 300
)
