source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
results <- matrix(FALSE, ncol = 2, nrow = N)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(results[, 1], results[, 2])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(results)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
results <- data.frame(results)
library('ggplot2')
qplot(data = results, aes( x = cond, y = outcome)) +
geom_point() +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .25)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .25)) +
geom_abline(intercept = 0, slope = 1, colour = 'white')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Preamble -------------------------------------------------
rm(list = ls())
if(Sys.info()['user'] == 'dag'){
path.data <- '/Users/dag/Dropbox/data/dembar/2015/'
path.out <- '/Users/dag/Dropbox/data/dembar/2015/out'
}
required.packages <- c('ggplot2', 'tidyr', 'car')
invisible(lapply(required.packages, library, character.only = TRUE))
# constants ------------------------------------------------
democracy_principles <- c("Freedom", "Control", "Equality")
democracy_functions <- c(
"INDLIB", "RULEOFLAW", "PUBLIC", "COMPET", "MUTUCONS",
"GOVCAP", "TRANSPAR", "PARTICIP", "REPRES"
)
# data objects ---------------------------------------------
library(foreign)
dembar <- read.dta(
file.path(
path.data, 'DB_dataset_allcountries_standardizeddata.dta'
)
)
detach(package:foreign)
blueprint <- subset(dembar, Blueprint == 1)
scatterplotMatrix(blueprint[, democracy_principles])
scatterplotMatrix(blueprint[, democracy_functions])
source('~/.active-rstudio-document', echo=TRUE)
scatterplotMatrix(results)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = FALSE)
gwf <- read.dta(
"/Users/dag/github/teaching/ws1617/introAtr/01/data/GWF_AllPoliticalRegimes.dta"
)
library("foreign")
gwf <- read.dta(
"/Users/dag/github/teaching/ws1617/introAtr/01/data/GWF_AllPoliticalRegimes.dta"
)
gwf <- within(gwf, {
regime_type <- ifelse(
gwf_regimetype != "NA", 1,
ifelse(gwf_nonautocracy == "democracy", 0, NA)
)
regime_type <- factor(regime_type, 0:1, c('Demokratie', 'Autokratie'))
}
)
library('ggplot2')
ggplot(
data = subset(gwf, !is.na(regime_type)),
aes(x = year)
) +
geom_bar(width = 1, colour = 'gray85', size = .1) + facet_wrap(~ regime_type) +
scale_x_continuous(breaks = seq(1950, 2010, 10)) +
labs(
y = "Anzahl unabhängiger Staaten",
title = "Geddes, Wright, Frantz (2014)"
) +
theme_minimal() +
theme(axis.title.x = element_blank())
ggsave(
plot = p, file = './regimesDistribution.png',
width = 7, height = 7/1.618, dpi = 300
)
p <- ggplot(
data = subset(gwf, !is.na(regime_type)),
aes(x = year)
) +
geom_bar(width = 1, colour = 'gray85', size = .1) + facet_wrap(~ regime_type) +
scale_x_continuous(breaks = seq(1950, 2010, 10)) +
labs(
y = "Anzahl unabhängiger Staaten",
title = "Geddes, Wright, Frantz (2014)"
) +
theme_minimal() +
theme(axis.title.x = element_blank())
ggsave(
plot = p, file = './regimesDistribution.png',
width = 7, height = 7/1.618, dpi = 300
)
p
source('~/.active-rstudio-document', echo=TRUE)
getwd()
?ggtheme
?ggplot2::ggtheme
?ggplot2::theme
?scale_fill_brewer
?guide_colorbar
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
packs <- c('ggplot2', 'car', 'lme4')
invisible(lapply(packs, library, character.only = TRUE))
pathOut <- "/Users/dag/Dropbox/publikationen/2013/PIinDemocracy/PiDemProj/output"
load(file.path(pathOut, "base.RData"))
base <- subset(base, year >= 1995 & country != "Malta")
df <- subset(                                  ## data setup
base, select = c("country", "cow", "year", "physint")
)
df <- within(df,       ## compute mean physint and sort data
mean.physint <- ave(physint, cow,
FUN = function(x) {mean(x, na.rm = TRUE) }
)
)
df <- df[with(df, order(-mean.physint, country)), ]
df <- within(df,         # factor countries for sorting plot
f.country <- factor(country)
)
library('ggplot2')
library('grid')        ## for unit() function in plot.margin
base_size <- 9                             ## set font size
p <- ggplot(df, aes(
x = year,
y = reorder(f.country, mean.physint, decrease = TRUE))
) +                                            ## add geoms
geom_tile(
data = df, aes(fill = factor(physint)), colour = "white",
size = .3
) +
scale_x_continuous(
breaks = seq(1995, 2007, 3), expand = c(0, 0)
) +
scale_y_discrete(expand = c(0, 0)) +
scale_fill_brewer(type = 'seq', palette = 9) +
theme_minimal(base_size = base_size) +             ## add theme
labs(x = "", y = "", fill = "PI Violations") +
guides(     ## remove white slashes from fill legend boxes
fill = guide_legend(nrow = 1, override.aes = list(colour = NULL))
) +
theme(                      ## finishing touches to theme
text = element_text(family = 'sans'),
legend.position = c(.325, 1.04),
legend.direction = "horizontal",
legend.key = element_rect(colour = "white"),
legend.key.size = unit(.5, "lines"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_text(size = .6*base_size, angle = 0),
plot.margin = unit(c(1, .1, 0, 0), "lines") ## crop margins
)
print(p)
rm(df, p)
# workspace setup ==========================================
rm(list = ls())
packs <- c('ggplot2')
invisible(lapply(packs, library, character.only = TRUE))
pathOut <- file.path(
"/Users/dag/Dropbox/publikationen/2013/",
"PIinDemocracy/PiDemProj/output"
)
load(file.path(pathOut, "base.RData"))
base <- subset(base, year >= 1995 & country != "Malta")
## data setup ----------------------------------------------
df <- subset(
base, select = c("country", "cow", "year", "physint")
)
df <- within(df,       ## compute mean physint and sort data
mean.physint <- ave(physint, cow,
FUN = function(x) {mean(x, na.rm = TRUE) }
)
)
df <- df[with(df, order(-mean.physint, country)), ]
df <- within(df,         # factor countries for sorting plot
f.country <- factor(country)
)
# plot data ------------------------------------------------
base_size <- 9                             ## set font size
p <- ggplot(df, aes(
x = year,
y = reorder(f.country, mean.physint, decrease = TRUE))
) +                                            ## add geoms
geom_tile(
data = df, aes(fill = factor(physint)), colour = "white",
size = .3
) +
scale_x_continuous(
breaks = seq(1995, 2007, 3), expand = c(0, 0)
) +
scale_y_discrete(expand = c(0, 0)) +
scale_fill_brewer(type = 'seq', palette = 9) +
theme_minimal(base_size = base_size) +             ## add theme
labs(x = "", y = "", fill = "PI Violations") +
guides(     ## remove white slashes from fill legend boxes
fill = guide_legend(nrow = 1, override.aes = list(colour = 'white'))
) +
theme(                      ## finishing touches to theme
text = element_text(family = 'sans'),
legend.position = c(.325, 1.04),
legend.direction = "horizontal",
legend.key = element_rect(colour = "white"),
legend.key.size = grid::unit(.5, "lines"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_text(size = .6*base_size, angle = 0),
plot.margin = unit(c(1, .1, 0, 0), "lines") ## crop margins
)
print(p)
# rm(df, p)
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
dim(pdta)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(data = pdta, aes(x = a, y = b)) +
geom_jitter() +
facet_wrap(~ cond)
pdta
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
#pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(data = pdta, aes(x = a, y = b)) +
geom_jitter() +
facet_wrap(~ cond)
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta
ggplot(data = pdta, aes(x = a, y = b)) +
geom_point() +
facet_wrap(~ cond)
ggplot(data = subset(pdta, value == 1), aes(x = a, y = b)) +
geom_point() +
facet_wrap(~ cond)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter() +
facet_wrap(~ cond)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter() +
facet_wrap(~ cond)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- within(pdta,
cond <- factor(
cond,
c("nec", 'suf', 'necsuf'),
c('notwendig', 'hinreichend', 'notwending & hinreichend')
)
)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter() +
facet_wrap(~ cond)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- within(pdta,
cond <- factor(
cond,
c("nec", 'suf', 'necsuf'),
c('notwendig', 'hinreichend', 'notwending & hinreichend')
)
)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter(position = position_jitter(width = .2)) +
facet_wrap(~ cond)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- within(pdta,
cond <- factor(
cond,
c("nec", 'suf', 'necsuf'),
c('notwendig', 'hinreichend', 'notwending & hinreichend')
)
)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter(position = position_jitter(width = .2, height = .2)) +
facet_wrap(~ cond)
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- within(pdta,
cond <- factor(
cond,
c("nec", 'suf', 'necsuf'),
c('notwendig', 'hinreichend', 'notwending & hinreichend')
)
)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter(position = position_jitter(width = .2, height = .2)) +
facet_wrap(~ cond) +
ggthemes::theme_igray()
library('ggplot2')
library('tidyr')
pdta <- expand.grid(
a = 0:1, b = 0:1
)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- within(pdta,
cond <- factor(
cond,
c("nec", 'suf', 'necsuf'),
c('notwendig', 'hinreichend', 'notwending & hinreichend')
)
)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter(position = position_jitter(width = .2, height = .2)) +
facet_wrap(~ cond) +
ggthemes::theme_igray()
library('ggplot2')
library('tidyr')
pdta <- expand.grid(a = 0:1, b = 0:1)
pdta <- within(pdta, {
nec <- ifelse(b <= a, 1, 0)
suf <- ifelse(a <= b, 1, 0)
necsuf <- ifelse(a == b, 1, 0)
a <- factor(a, 0:1, c("~A", "A"))
b <- factor(b, 0:1, c("~B", "B"))
}
)
pdta <- gather(pdta, 'cond', 'value', nec:necsuf)
pdta <- within(pdta,
cond <- factor(
cond,
c("nec", 'suf', 'necsuf'),
c('notwendig', 'hinreichend', 'notwending & hinreichend')
)
)
pdta <- pdta[rep(1:nrow(pdta), each = 10), ]
ggplot(
data = subset(pdta, value == 1),
aes(x = a, y = b)) +
geom_jitter(position = position_jitter(width = .2, height = .2)) +
facet_wrap(~ cond) +
ggthemes::theme_fivethirtyeight()
rm(list = ls())
